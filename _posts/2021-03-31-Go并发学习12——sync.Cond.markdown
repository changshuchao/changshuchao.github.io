---
layout: post
title: "Go并发学习12——sync.Cond"
date: 2021-03-31
image: 11.jpg
tags: [Go基础知识,Go并发]
categories: Go并发
typora-root-url: ..
---



sync 包还提供了一个条件变量类型 `sync.Cond`，它可以和互斥锁或读写锁（以下统称互斥锁）组合使用，用来协调想要访问共享资源的线程。

不过，与互斥锁不同，条件变量 `sync.Cond`  的主要作用并不是保证在同一时刻仅有一个线程访问某一个共享资源，而是在对应的共享资源状态发送变化时，通知其它因此而阻塞的线程。条件变量总是和互斥锁组合使用，互斥锁为共享资源的访问提供互斥支持，而条件变量可以就共享资源的状态变化向相关线程发出通知，重在「协调」。



我们可以通过 `sync.NewCond` 返回对应的条件变量实例，初始化的时候需要传入互斥锁，该互斥锁实例会赋值给 `sync.Cond` 的 `L` 属性：

```go
locker := &sync.Mutex{}
cond := sync.NewCond(locker)
```

`sync.Cond` 主要实现一个条件变量，假设 goroutine A 执行前需要等待另外一个 goroutine B 的通知，那么处于等待状态的  goroutine A 会保存在一个通知列表，也就是说需要某种变量状态的 goroutine A  将会等待（Wait）在那里，当某个时刻变量状态改变时，负责通知的 goroutine B  会通过对条件变量通知的方式（Broadcast/Signal）来通知处于等待条件变量的 goroutine  A，这样就可以在共享内存中实现类似「消息通知」的同步机制。

假设我们有一个读取器和一个写入器，读取器必须依赖写入器对缓冲区进行数据写入后，才可以从缓冲区中读取数据，写入器每次完成写入数据后，都需要通过某种通知机制通知处于阻塞状态的读取器，告诉它可以对数据进行访问，这种场景正好可以通过条件变量来实现：

```go
package main

import (
    "bytes"
    "fmt"
    "io"
    "sync"
    "time"
)

type myBucket struct {
    lock   *sync.RWMutex
    cond   *sync.Cond
    buffer *bytes.Buffer
}

func newBucket() *myBucket {
    buff := make([]byte, 0)

    bucket := &myBucket{
        buffer: bytes.NewBuffer(buff),
        lock:   new(sync.RWMutex),
    }

    bucket.cond = sync.NewCond(bucket.lock.RLocker())
    return bucket
}

func (mb *myBucket) read(readerNum int) {
    mb.lock.RLock()
    defer mb.lock.RUnlock()
    var data []byte
    var byt byte
    var err error
    for {
        if byt, err = mb.buffer.ReadByte(); err != nil {
            if err == io.EOF {
                if len(data) != 0 {
                    fmt.Printf("reader-%d has just read bytes : %s\n", readerNum, data)
                }
                mb.cond.Wait()
                data = data[:0]
                continue
            }
        }
        data = append(data, byt)
    }


}

func (mb *myBucket) write(data []byte) {
    mb.lock.Lock()
    defer mb.lock.Unlock()
    //signal/broadcast
    mb.buffer.Write(data)
    mb.cond.Broadcast()

}

func TestCondReaderAndWriter() {
    bucket := newBucket()
    for i := 0; i < 3; i++ {
        go bucket.read(i)
    }

    for i := 0; i < 20; i++ {
        go bucket.write([]byte(fmt.Sprintf("data-%d", i)))
        //保证消费者有时间消费
        time.Sleep(10 * time.Millisecond)
    }

    //这里不等待的话，主线程就退出了
    time.Sleep(5 * time.Second)

    fmt.Println("end")

}
```