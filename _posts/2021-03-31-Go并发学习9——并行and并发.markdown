---
layout: post
title: "Go并发学习9——并行and并发"
date: 2021-03-31
image: 8.jpg
tags: [Go基础知识,Go并发]
categories: Go并发
typora-root-url: ..
---



「多核」指的是有效利用 CPU 的多核提高程序执行效率，「并行」和「并发」一字之差，但其实是两个完全不同的概念，「并发」一般是由 CPU  内核通过时间片或者中断来控制的，遇到 IO  阻塞或者时间片用完时会交出线程的使用权，从而实现在一个内核上处理多个任务，而「并行」则是多个处理器或者多核处理器同时执行多个任务，同一时间有多个任务在调度，因此，一个内核是无法实现并行的，因为同一时间只有一个任务在调度。



**多进程、多线程以及协程显然都是属于「并发」范畴的，可以实现程序的并发执行，至于是否支持「并行」，则要看程序运行系统是否是多核，以及编写程序的语言是否可以利用 CPU 的多核特性。**



linux命令：

| 查看CPU信息（型号）                 | cat /proc/cpuinfo \| grep name \| cut -f2 -d: \| uniq -c     |
| ----------------------------------- | ------------------------------------------------------------ |
| 查看物理CPU个数                     | cat /proc/cpuinfo\| grep "physical id"\| sort\| uniq\| wc -l |
| 查看每个物理CPU中core的个数(即核数) | cat /proc/cpuinfo\| grep "cpu cores"\| uniq                  |
| 查看逻辑CPU的个数                   | cat /proc/cpuinfo\| grep "processor"\| wc -l                 |



所谓物理 CPU 核心数指的是真正插在物理插槽上 CPU 的核心数，逻辑 CPU 核心数指的是结合 CPU 多核以及超线程技术得到的 CPU 核心数，**最终核心数以逻辑 CPU 核心数为准**。





### 示例

启动多个子协程，子协程数量和 CPU 核心数保持一致，以便充分利用多核并行运算，每个子协程计算分给它的那部分计算任务，最后将不同子协程的计算结果再做一次累加，这样就可以得到所有数据的计算总和。

我们通过 `runtime.NumCPU()` 获取逻辑 CPU 核心数，然后通过 `runtime.GOMAXPROCS()` 方法设置程序运行时可以使用的最大核心数，这里设置为和系统 CPU 核心数一致，然后初始化一个通道数组，数量和 CPU  核心数保持一致，以便充分利用多核实现并行计算，接下来就是依次启动子协程进行计算，并在子协程中计算完成后将结果数据发送到通道中，最后在主协程中接收这些通道数据并进行再次累加，作为最终计算结果打印出来，同时计算程序运行时间作为性能的考量依据。

```go
func ConcurrencyAndParallel() {
    start := time.Now()
    fmt.Println("core num :", runtime.NumCPU())
    //比较两者性能
    runtime.GOMAXPROCS(numCores)
    //runtime.GOMAXPROCS(1)
    chanArr := make([]chan int, numCores)

    sum := func(num int, ch chan int) {
        defer close(ch)
        sum := 0
        for i := 1; i <= 10000000; i++ {
            sum += i
        }
        fmt.Printf("子协程%d运算结果:%d\n", num, sum)
        ch <- sum
    }

    for i := 0; i < numCores; i++ {
        chanArr[i] = make(chan int)
        go sum(i, chanArr[i])
    }

    result := 0
    for _, ch := range chanArr {
        result += <-ch
    }

    end := time.Now()
    fmt.Printf("最终运算结果: %d, 执行耗时(s): %f\n", result, end.Sub(start).Seconds())
}

```

可以看到使用多核比单核整体运行速度快了4倍左右，查看系统 CPU 监控也能看到所有内核都被打满，这在 CPU 密集型计算中带来的性能提升还是非常显著的，不过对于 IO  密集型计算可能没有这么显著，甚至有可能比单核低，因为 CPU 核心之间的切换也是需要时间成本的，所以 IO  密集型计算并不推荐使用这种机制，什么是 IO 密集型计算？比如数据库连接、网络请求等。

另外，需要注意的是，目前 Go 语言默认就是支持多核的，所以如果上述示例代码中没有显式设置 `runtime.GOMAXPROCS(cpus)` 这行代码，编译器也会利用多核 CPU 来执行代码，其结果是运行耗时和设置多核是一样的。